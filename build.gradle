plugins {
    id 'io.freefair.lombok' version '5.0.0-rc6'
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

group = 'my.boot-crud-rest'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir "$projectDir/src/integration-test/resources"
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-hateoas'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
	
	// add some logging & monitoring:
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
	
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.6'
	
	// we should use money for price if we do any calculations but for now using Long (price in cents ;)
	//implementation group: 'org.javamoney', name: 'moneta', version: '1.3'

	// REST documentation
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.2.34'
	
	runtimeOnly 'com.h2database:h2'
	
	testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'
	testImplementation group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.1.13'
	testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: '1.6.0'	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
	integrationTestRuntime 'com.h2database:h2'
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

test {
	useJUnitPlatform()
	testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

integrationTest {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}
